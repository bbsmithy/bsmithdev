extends ../views/post.pug



block content
    // Page Header
    .container.animated.fadeIn(style='margin-top: 100px')
      .jumbotron.col-lg-8.col-md-10.mx-auto(style="background-image: url('https://source.unsplash.com/collection/136301/1000x300'); color: white; text-shadow: 2px 2px 4px #000000;")
        .post-heading
          h1 Server-side React News App with Next.js
          h2.subheading 
    // Post Content
    article
      .container
        .row
          .col-lg-8.col-md-10.mx-auto
            h3 Links
            a(href="https://github.com/bbsmithy/cron-news" target="blank") 
                img(src="../img/github-logo.png", alt="" height="50px")
            br
            br
            h3 Motivation
            p
                | I've decided to read more news and articles that are not related to what I do. The problem with this is 
                | there are loads of mad sites all shouting for attention and this is distracting from the information/story. So in effort to fix this problem and read more news
                | i'm going to build a server side react app with Next.js that connects to newsorg api and just displays the headlines and links of news vendors that I like.
            
            h3 Steps:
            p   1) Set up News API
            p   2) Set up Next.js
            p   3) Handle query strings with Express.js server
            p   4) Pull down news data
            p   5) Render news headlines/links
            br


            h3 (1) Set up News API
            p 
                | The News API is great, they cover a lot of major news vendor around the world and allows you to get headlines and description on 
                | all sorts of topics. Its free to use but you need to get an API key here: <a href="https://newsapi.org/" target="blank">https://newsapi.org/</a>
                | The news vendor ids i'll be using are hacker-news, bloomberg, the-irish-times and business-insider.
                | This the endpoint i'll be fetching from:
            pre 
                code.javascript 
                   | `https://newsapi.org/v2/top-headlines?sources=${id}&apiKey=API_KEY`
            br

            h3 (2) Set up Next.js
            p First we'll set up the Next.js app structure,
            pre
                code.bash
                    |mkdir ssr-news-app && cd ssr-news-app
                    |npm init -y
                    |npm install --save react react-dom next
                    |mkdir pages
            p Add the scripts object to your package.json
            pre   
                code.json
                    |"scripts": {
                    |   "dev": "next",
                    |   "build": "next build",
                    |   "start": "next start"
                    |}
            p Create pages/index.js
            pre 
                code.javascript
                    |const Index = props => {
                    |    return (
                    |      #{'<h1>How are you getting on?</h1>'}
                    |    )
                    |}
                    |
                    |export default Index;
            p Now we can launch the app, Next.js uses file names inside of the pages directory as routes and takes index.js as '/' by default. 
                | So now if we start our server and open localhost:3000/ we should see our index page.
            pre
                code.bash
                    |npm run dev
            p If you see this error then your most likely using an older version of node that Next.js doesn't support.
            pre
                code.bash
                    |Uncaught TypeError: Object.values is not a function JavaScript
            p Try switching to use a node version greater than 7 to fix this. You can use node version manager (nvm)
            pre
                code.bash
                    |nvm use 10



                    
            br
            
            h3 (3) Handle query strings with Express.js server
            p Create a file called server.js in root of project and install express
            pre
                code.bash
                    | npm install --save express
            span server.js

            br
            pre
                code.javascript
                   |const express = require('express');
                   |const next = require('next');
                   |
                   |const dev = process.env.NODE_ENV !== 'production';
                   |const app = next({ dev });
                   |const handle = app.getRequestHandler();
                   |
                   |app
                   |.prepare()
                   |.then(() => {
                   | const server = express();
                   |
                   | server.get('*', (req, res) => {
                   | return handle(req, res);
                   | });
                   |  
                   | server.get('/:id', (req, res) => {
                   |    const page = '/';
                   |    const queryParams = { id: req.params.id };
                   |    app.render(req, res, page, queryParams);
                   | });
                   |
                   | server.listen(3000, err => {
                   |   if (err) throw err;
                   |      console.log('> Ready on http://localhost:3000');
                   |   });
                   | })
                   | .catch(ex => {
                   |     console.error(ex.stack);
                   |     process.exit(1);
                   | });
            p If we visit 'localhost:3000/?id=hacker-news' we can then grab the query string 'hacker-news' from the id key. 
              |req.params.id returns our query string 'hacker-news'.
            pre
                code.javascript
                   | server.get('/:id', (req, res) => {
                   |    const page = '/';
                   |    const queryParams = { id: req.params.id };
                   |    app.render(req, res, page, queryParams);
                   | });
            p app.render is used to render a page inside our pages directory so '/' will render our index.js page. We'll pass our queryParams to that page so we can use the id in our fetch to News API.
            h3 (4) Pull down news data
            p We'll now install isomorphic-unfetch which is an implementation of fetch (a browser API) that can be used on the server. Import it once installed:
            pre
                code.bash
                    | npm install --save isomorphic-unfetch
            span pages/index.js
            pre
                code.javascript
                    | import fetch from 'isomorphic-unfetch';

            pre
                code.javascript
                    |Index.getInitialProps = async function(context) {
                    |    const { id } = context.query;
                    |
                    |    const url = id
                    |        ? `https://newsapi.org/v2/top-headlines?sources=${id}&apiKey=API_KEY`
                    |        : `https://newsapi.org/v2/top-headlines?sources=hacker-news&apiKey=API_KEY`;
                    |
                    |    const res = await fetch(url);
                    |    const data = await res.json();
                    |
                    |    return {
                    |        articles: data.articles,
                    |        source: data.articles[0].source.name
                    |    };
                    |};
            p getInitialProps() allows us to pass props to our component before rendering occurs. 
              | So we can make our fetch to the News API with our id, and then use the returned data as props to our Index component.

            h3 (5) Render news headlines/links
            p Create the Index component that will pass our props.articles down to the Feed component
            pre
              code.javascript.
                import Link from 'next/link';
                import Feed from '../components/Feed';
                import fetch from 'isomorphic-unfetch';
                
                const Index = props => {
                    return (
                        &lt;div>
                            &lt;div id="title">
                                &lt;h2 style={{ fontWeight: 900 }}>{props.source} Top Stories&lt;/h2>
                            &lt;/div>
                            &lt;div id="nav">
                                &lt;ul>
                                &lt;li>
                                    &lt;Link href="/?id=hacker-news">Hacker News&lt;/Link>
                                &lt;/li>
                                &lt;li>
                                    &lt;Link href="/?id=bloomberg">Bloomberg&lt;/Link>
                                &lt;/li>
                                &lt;li>
                                    &lt;Link href="/?id=business-insider">Business Insider&lt;/Link>
                                &lt;/li>
                                &lt;li>
                                    &lt;Link href="/?id=the-irish-times">The Irish Times&lt;/Link>
                                &lt;/li>
                                &lt;/ul>
                            &lt;/div>
                            &lt;div
                                style={{
                                width: '100%',
                                margin: 'auto'
                                }}
                            >
                                {props.articles && &lt;Feed articles={props.articles} />}
                            &lt;/div>
                    
                            &lt;style jsx>{`
                                #title {
                                font-family: 'Lucida Console', Monaco, monospace;
                                margin: auto;
                                width: 40%;
                                display: 'inline-block';
                                }
                                #nav {
                                position: fixed;
                                top: 0px;
                                lef: 0px;
                                padding: 20px;
                                box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
                                transition: 0.3s;
                                }
                                ul {
                                list-style-type: none;
                                display: inline;
                                }
                                li {
                                text-decoration: none;
                                margin-bottom: 15px;
                                font-size: 25px;
                                }
                                a {
                                text-decoration: none;
                                font-size: 16px;
                                }
                            `}
                            &lt;/style>
                        &lt;/div>
                    );
                };

                Index.getInitialProps = async function(context) {
                    const { id } = context.query;

                    const url = id
                        ? `https://newsapi.org/v2/top-headlines?sources=${id}&apiKey=API_KEY`
                        : `https://newsapi.org/v2/top-headlines?sources=hacker-news&apiKey=API_KEY`;

                    const res = await fetch(url);
                    const data = await res.json();

                    return {
                        articles: data.articles,
                        source: data.articles[0].source.name
                    };
                };

                export default Index;

                    
            p Create the feed component in components/Feed.js, this will render an Article component for each article pass through props
            pre
                code.javasrcipt. 
                    import Article from './Article';
                    const Feed = props => {
                    return (
                        &lt;div style={{display: 'inline', width: '40%', margin: 'auto' }}>
                        {props.articles.map(article => {
                            return &lt;Article title={article.title} url={article.url} description={article.description} />;
                        })}
                        &lt;/div>
                    );
                    };

                    export default Feed;
            p And then finally the Article component in /components/Article.js
            pre
                code.javascript.

                    const Article = props => {
                        return (
                             &lt;div className="card">
                                &lt;a href={props.url} style={{ textDecoration: 'none' }} target="blank">
                                    &lt;div className="container">
                                    &lt;h2 className="header">{props.title}&lt;/h2>
                                    &lt;p style={{ marginBottom: 30 }}>{props.description}&lt;/p>
                                    &lt;/div>
                                &lt;/a>
                                &lt;style jsx>{`
                                    .card {
                                    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);
                                    transition: 0.3s;
                                    width: 40%;
                                    margin: 20px auto 20px auto;
                                    padding: 20px;
                                    }

                                    p {
                                    font-family: Arial, Helvetica, sans-serif;
                                    }

                                    h2 {
                                    font-family: 'Lucida Console', Monaco, monospace;
                                    }

                                    .card:hover {
                                    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
                                    }

                                    .container {
                                    padding: 2px 16px;
                                    }
                                `}
                                &lt;/style>
                            &lt;/div>
                        );
                    };
                    export default Article;
            p Now if I run our server on localhost:3000 with:
            pre
                code.bash npm run dev
            p I can see the latest hacker news articles!
            img(src="../img/react-news-image.png", alt="" width="100%")

            p Thanks for reading, hope it helps with getting to grips with SSR and Next.js


            br
            br
            br
            include ../includes/disqus.pug
            
